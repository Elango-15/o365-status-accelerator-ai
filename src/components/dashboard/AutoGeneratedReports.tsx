import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  FileText, 
  Users, 
  Shield, 
  MessageSquare, 
  Database, 
  Mail,
  RefreshCw,
  CheckCircle,
  AlertTriangle,
  Clock,
  Download,
  BarChart3,
  TrendingUp,
  Activity
} from 'lucide-react';
import { useAutoReportGeneration } from '@/hooks/useAutoReportGeneration';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';

const AutoGeneratedReports = () => {
  const { reports, metrics, isGenerating, lastTenantConfig, refreshReports, getReportByType } = useAutoReportGeneration();

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'generating':
        return <RefreshCw className="h-4 w-4 text-blue-500 animate-spin" />;
      case 'error':
        return <AlertTriangle className="h-4 w-4 text-red-500" />;
      default:
        return <Clock className="h-4 w-4 text-gray-400" />;
    }
  };

  const getStatusBadge = (status: string) => {
    const config = {
      completed: { variant: 'default' as const, label: 'Completed', className: 'bg-green-100 text-green-800' },
      generating: { variant: 'default' as const, label: 'Generating', className: 'bg-blue-100 text-blue-800' },
      error: { variant: 'destructive' as const, label: 'Error', className: 'bg-red-100 text-red-800' }
    };
    
    const statusConfig = config[status as keyof typeof config];
    return (
      <Badge variant={statusConfig.variant} className={statusConfig.className}>
        {statusConfig.label}
      </Badge>
    );
  };

  const reportIcons = {
    'user-activity': Users,
    'license-usage': Shield,
    'teams-activity': MessageSquare,
    'sharepoint-usage': Database,
    'security-score': Shield,
    'email-activity': Mail
  };

  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];

  if (!lastTenantConfig) {
    return (
      <Card>
        <CardContent className="p-12 text-center">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No Tenant Configuration</h3>
          <p className="text-gray-600 mb-4">
            Please configure your Tenant ID and Client ID in Settings to automatically generate O365 reports.
          </p>
          <Button variant="outline">
            <Shield className="h-4 w-4 mr-2" />
            Configure Tenant
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header with Metrics */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-primary" />
                Auto-Generated O365 Reports
              </CardTitle>
              <p className="text-gray-600 mt-1">
                Tenant: {lastTenantConfig.tenantId.substring(0, 8)}... | 
                Client: {lastTenantConfig.clientId.substring(0, 8)}...
              </p>
            </div>
            <div className="flex items-center gap-3">
              {isGenerating && (
                <div className="flex items-center gap-2 text-blue-600">
                  <RefreshCw className="h-4 w-4 animate-spin" />
                  <span className="text-sm">Generating reports...</span>
                </div>
              )}
              <Button onClick={refreshReports} disabled={isGenerating}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh Reports
              </Button>
            </div>
          </div>
        </CardHeader>
        
        {metrics && (
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">{metrics.totalUsers.toLocaleString()}</div>
                <div className="text-sm text-blue-600">Total Users</div>
              </div>
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">{metrics.activeUsers.toLocaleString()}</div>
                <div className="text-sm text-green-600">Active Users</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">{metrics.licensesAssigned.toLocaleString()}</div>
                <div className="text-sm text-purple-600">Licenses Used</div>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <div className="text-2xl font-bold text-orange-600">{metrics.securityScore}%</div>
                <div className="text-sm text-orange-600">Security Score</div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      {/* Reports Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {reports.map((report) => {
          const IconComponent = reportIcons[report.type];
          
          return (
            <Card key={report.id} className="hover:shadow-md transition-shadow">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-gray-100 rounded-lg">
                      <IconComponent className="h-5 w-5 text-gray-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold">{report.title}</h3>
                      <p className="text-sm text-gray-500">
                        {new Date(report.generatedAt).toLocaleTimeString()}
                      </p>
                    </div>
                  </div>
                  {getStatusBadge(report.status)}
                </div>
              </CardHeader>
              
              <CardContent>
                {report.status === 'generating' && (
                  <div className="space-y-3">
                    <div className="flex items-center gap-2">
                      <RefreshCw className="h-4 w-4 animate-spin text-blue-500" />
                      <span className="text-sm">Fetching data from Microsoft Graph...</span>
                    </div>
                    <Progress value={Math.random() * 100} className="h-2" />
                  </div>
                )}
                
                {report.status === 'completed' && report.data && (
                  <div className="space-y-4">
                    {/* Quick Stats */}
                    {report.type === 'user-activity' && (
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>Active: <span className="font-semibold">{report.data.activeUsers}</span></div>
                        <div>Total: <span className="font-semibold">{report.data.totalUsers}</span></div>
                        <div>New: <span className="font-semibold text-green-600">+{report.data.newUsers}</span></div>
                        <div>Inactive: <span className="font-semibold text-red-600">{report.data.inactiveUsers}</span></div>
                      </div>
                    )}
                    
                    {report.type === 'license-usage' && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Utilization</span>
                          <span className="font-semibold">{report.data.utilizationRate}%</span>
                        </div>
                        <Progress value={report.data.utilizationRate} className="h-2" />
                        <div className="text-sm text-gray-600">
                          Monthly Cost: <span className="font-semibold">${report.data.monthlyCost.toLocaleString()}</span>
                        </div>
                      </div>
                    )}
                    
                    {report.type === 'teams-activity' && (
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>Teams: <span className="font-semibold">{report.data.activeTeams}/{report.data.totalTeams}</span></div>
                        <div>Channels: <span className="font-semibold">{report.data.activeChannels}</span></div>
                        <div>Messages: <span className="font-semibold">{report.data.totalMessages.toLocaleString()}</span></div>
                        <div>Meetings: <span className="font-semibold">{report.data.totalMeetings}</span></div>
                      </div>
                    )}
                    
                    {report.type === 'sharepoint-usage' && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Storage Used</span>
                          <span className="font-semibold">{report.data.usedStorage} / {report.data.totalStorage}</span>
                        </div>
                        <Progress value={75} className="h-2" />
                        <div className="text-sm text-gray-600">
                          Sites: <span className="font-semibold">{report.data.activeSites}/{report.data.totalSites}</span>
                        </div>
                      </div>
                    )}
                    
                    {report.type === 'security-score' && (
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Security Score</span>
                          <span className="font-semibold">{report.data.overallScore}/{report.data.maxScore}</span>
                        </div>
                        <Progress value={report.data.overallScore} className="h-2" />
                        <div className="text-sm text-gray-600">
                          Risk Level: <span className={`font-semibold ${
                            report.data.riskLevel === 'Low' ? 'text-green-600' :
                            report.data.riskLevel === 'Medium' ? 'text-yellow-600' : 'text-red-600'
                          }`}>{report.data.riskLevel}</span>
                        </div>
                      </div>
                    )}
                    
                    {report.type === 'email-activity' && (
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>Sent: <span className="font-semibold">{report.data.emailsSent.toLocaleString()}</span></div>
                        <div>Received: <span className="font-semibold">{report.data.emailsReceived.toLocaleString()}</span></div>
                        <div>Spam Blocked: <span className="font-semibold text-green-600">{report.data.spamFiltered}</span></div>
                        <div>Threats Blocked: <span className="font-semibold text-red-600">{report.data.malwareBlocked + report.data.phishingBlocked}</span></div>
                      </div>
                    )}
                    
                    <Button size="sm" variant="outline" className="w-full">
                      <Download className="h-4 w-4 mr-2" />
                      Export Report
                    </Button>
                  </div>
                )}
                
                {report.status === 'error' && (
                  <div className="text-center py-4">
                    <AlertTriangle className="h-8 w-8 text-red-500 mx-auto mb-2" />
                    <p className="text-sm text-red-600">Failed to generate report</p>
                    <Button size="sm" variant="outline" className="mt-2">
                      Retry
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Detailed Report Views */}
      {reports.some(r => r.status === 'completed') && (
        <Tabs defaultValue="user-activity" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3 lg:grid-cols-6">
            <TabsTrigger value="user-activity">Users</TabsTrigger>
            <TabsTrigger value="license-usage">Licenses</TabsTrigger>
            <TabsTrigger value="teams-activity">Teams</TabsTrigger>
            <TabsTrigger value="sharepoint-usage">SharePoint</TabsTrigger>
            <TabsTrigger value="security-score">Security</TabsTrigger>
            <TabsTrigger value="email-activity">Email</TabsTrigger>
          </TabsList>

          {/* User Activity Detailed View */}
          <TabsContent value="user-activity">
            {(() => {
              const report = getReportByType('user-activity');
              if (!report?.data) return <div>No data available</div>;
              
              return (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Daily Active Users</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={report.data.dailyActiveUsers}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="date" />
                          <YAxis />
                          <Tooltip />
                          <Line type="monotone" dataKey="users" stroke="#3b82f6" strokeWidth={2} />
                        </LineChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle>Top Departments</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={report.data.topDepartments}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" />
                          <YAxis />
                          <Tooltip />
                          <Bar dataKey="users" fill="#3b82f6" />
                          <Bar dataKey="active" fill="#10b981" />
                        </BarChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </div>
              );
            })()}
          </TabsContent>

          {/* License Usage Detailed View */}
          <TabsContent value="license-usage">
            {(() => {
              const report = getReportByType('license-usage');
              if (!report?.data) return <div>No data available</div>;
              
              return (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>License Distribution</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <PieChart>
                          <Pie
                            data={report.data.licenseTypes}
                            cx="50%"
                            cy="50%"
                            outerRadius={100}
                            fill="#8884d8"
                            dataKey="assigned"
                            label={({ type, assigned }) => `${type}: ${assigned}`}
                          >
                            {report.data.licenseTypes.map((entry: any, index: number) => (
                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                  
                  <Card>
                    <CardHeader>
                      <CardTitle>License Trends</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={report.data.trends}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="month" />
                          <YAxis />
                          <Tooltip />
                          <Bar dataKey="assigned" fill="#3b82f6" />
                          <Bar dataKey="available" fill="#10b981" />
                        </BarChart>
                      </ResponsiveContainer>
                    </CardContent>
                  </Card>
                </div>
              );
            })()}
          </TabsContent>

          {/* Add other detailed views for remaining report types */}
          <TabsContent value="teams-activity">
            <Card>
              <CardHeader>
                <CardTitle>Teams Activity Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">Detailed Teams activity charts and metrics will be displayed here.</p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="sharepoint-usage">
            <Card>
              <CardHeader>
                <CardTitle>SharePoint Usage Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">Detailed SharePoint usage charts and metrics will be displayed here.</p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="security-score">
            <Card>
              <CardHeader>
                <CardTitle>Security Score Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">Detailed security score analysis and recommendations will be displayed here.</p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="email-activity">
            <Card>
              <CardHeader>
                <CardTitle>Email Activity Details</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600">Detailed email activity charts and security metrics will be displayed here.</p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}
    </div>
  );
};

export default AutoGeneratedReports;